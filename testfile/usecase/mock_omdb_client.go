// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/omdb_client.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	types "github.com/dhafinmuktafin/omdb-client-api/internal/model/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockOmdbClientUseCase is a mock of OmdbClientUseCase interface
type MockOmdbClientUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockOmdbClientUseCaseMockRecorder
}

// MockOmdbClientUseCaseMockRecorder is the mock recorder for MockOmdbClientUseCase
type MockOmdbClientUseCaseMockRecorder struct {
	mock *MockOmdbClientUseCase
}

// NewMockOmdbClientUseCase creates a new mock instance
func NewMockOmdbClientUseCase(ctrl *gomock.Controller) *MockOmdbClientUseCase {
	mock := &MockOmdbClientUseCase{ctrl: ctrl}
	mock.recorder = &MockOmdbClientUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOmdbClientUseCase) EXPECT() *MockOmdbClientUseCaseMockRecorder {
	return m.recorder
}

// GetMovieListByKeyword mocks base method
func (m *MockOmdbClientUseCase) GetMovieListByKeyword(arg0 context.Context, arg1 int64, arg2 string) (types.SearchMovieResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieListByKeyword", arg0, arg1, arg2)
	ret0, _ := ret[0].(types.SearchMovieResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieListByKeyword indicates an expected call of GetMovieListByKeyword
func (mr *MockOmdbClientUseCaseMockRecorder) GetMovieListByKeyword(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieListByKeyword", reflect.TypeOf((*MockOmdbClientUseCase)(nil).GetMovieListByKeyword), arg0, arg1, arg2)
}

// GetMovieByMovieId mocks base method
func (m *MockOmdbClientUseCase) GetMovieByMovieId(arg0 context.Context, arg1 string) (types.MovieDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieByMovieId", arg0, arg1)
	ret0, _ := ret[0].(types.MovieDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieByMovieId indicates an expected call of GetMovieByMovieId
func (mr *MockOmdbClientUseCaseMockRecorder) GetMovieByMovieId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieByMovieId", reflect.TypeOf((*MockOmdbClientUseCase)(nil).GetMovieByMovieId), arg0, arg1)
}
