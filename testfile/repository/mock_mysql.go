// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/mysql.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMySQLRepository is a mock of MySQLRepository interface
type MockMySQLRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMySQLRepositoryMockRecorder
}

// MockMySQLRepositoryMockRecorder is the mock recorder for MockMySQLRepository
type MockMySQLRepositoryMockRecorder struct {
	mock *MockMySQLRepository
}

// NewMockMySQLRepository creates a new mock instance
func NewMockMySQLRepository(ctrl *gomock.Controller) *MockMySQLRepository {
	mock := &MockMySQLRepository{ctrl: ctrl}
	mock.recorder = &MockMySQLRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMySQLRepository) EXPECT() *MockMySQLRepositoryMockRecorder {
	return m.recorder
}

// InsertLogging mocks base method
func (m *MockMySQLRepository) InsertLogging(arg0 context.Context, arg1 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertLogging", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertLogging indicates an expected call of InsertLogging
func (mr *MockMySQLRepositoryMockRecorder) InsertLogging(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertLogging", reflect.TypeOf((*MockMySQLRepository)(nil).InsertLogging), arg0, arg1)
}
